#!/usr/bin/env python
import sys
import argparse
from flowermodel.argparsefuncs import *

if __name__ == "__main__":
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    if len(sys.argv)==1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    subparsers = parser.add_subparsers()
    
    #### blob_parser ####   
    blob_parser = subparsers.add_parser("blob", help='Find all the blobs in the image', formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    blob_parser.add_argument("--filename", type=str, metavar='<path>', required=True,
                            help="The video file of time-course of GFP/RFP-tagged cells.")
    blob_parser.add_argument("--frame-index", type=int, metavar='<value>', required=True,
                            help='Index of the video frame to do the blob detection on')                            
    blob_parser.add_argument("--out-dir", type=str, metavar='<path>', default='../data/blobs/', 
                            help='Output directory where to store the blob coordinates.') 
                            
    blob_parser.set_defaults(func=get_frame_blobs)

    #### framecount_parser ####
    framecount_parser = subparsers.add_parser("framecount", help='Count the number of frames in video.', formatter_class=argparse.ArgumentDefaultsHelpFormatter)    

    framecount_parser.add_argument("--filename", type=str, metavar='<path>', required=True,
                            help="The video file of time-course of GFP/RFP-tagged cells.")

    framecount_parser.set_defaults(func=count_frames)

    #### pbs_parser ####   
    pbs_parser = subparsers.add_parser("pbs", help='Create a PBS job array file for submitting blob detection tasks to the cluster using qsub.', 
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    pbs_parser.add_argument("--filename", type=str, metavar='<path>', required=True,
                            help="The video file of time-course of GFP/RFP-tagged cells.")
    pbs_parser.add_argument("--jobname", type=str, metavar='<path>', default='blob',
                            help="Name of the jobs to be submitted.")
    pbs_parser.add_argument("--walltime", type=str, metavar='<path>', default='0:30:00',
                            help="Walltime requested on the cluster.")
    pbs_parser.add_argument("--num-cores", type=str, metavar='<path>', default=2,
                            help="Number of cores requested on the cluster.")
    pbs_parser.add_argument("--pbslogs", type=str, metavar='<path>', default='pbslogs',
                            help="The path to create for storing the PBS logs.")

    pbs_parser.set_defaults(func=create_pbs)

    #### clip_parser ####   
    clip_parser = subparsers.add_parser("clip", help='Clip videos with multiple subfields into separate video files.', 
                                        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    clip_parser.add_argument("--filename", type=str, metavar='<path>', required=True,
                            help="The video file of time-course of GFP/RFP-tagged cells.")
    clip_parser.add_argument("--nrows", type=int, metavar='<value>', default=2,
                            help="Number of rows in the video.")
    clip_parser.add_argument("--ncols", type=int, metavar='<value>', default=4,
                            help="Number of columns in the video.")

    clip_parser.set_defaults(func=clip_video)
    ########################## 
    args = parser.parse_args()
    args.func(args)